plugins {
	id 'java'
	id 'jacoco'
	id 'org.springframework.boot' version '3.2.4'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

configurations {
	asciidoctorExt

	compileOnly {
		extendsFrom annotationProcessor
	}
}

group = 'com.management'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"

	implementation 'org.springframework.session:spring-session-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	implementation 'org.springframework.boot:spring-boot-starter-batch'

	implementation 'org.springframework.boot:spring-boot-starter-validation'

	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'

	implementation 'org.yaml:snakeyaml:2.0'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'

	annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.batch:spring-batch-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.withType(JavaCompile) {
	options.generatedSourceOutputDirectory = file("$projectDir/build/generated")
}

sourceSets {
	main {
		java {
			srcDirs += "$projectDir/build/generated"
		}
	}
}

jacoco {
	toolVersion = '0.8.11'
}

jacocoTestReport {
	reports {
		xml.required = true
		csv.required = false
		html.required = true
	}

	def Qdomains = []

	for(qPattern in '**/QA' .. '**/QZ'){
		Qdomains.add(qPattern + '*')
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it,
					exclude: [
							'**/*Application*',
							'**/*Exception*',
							'**/*Response*',
							'**/*Request*',
							'**/*Dto*',
							'**/config/**',
							'**/embed/**',
							'**/*Builder*'
					] + Qdomains)
		}))
	}
}

jacocoTestCoverageVerification {
	def Qdomains = []

	for (qPattern in '*.QA'..'*.QZ') {
		Qdomains.add(qPattern + '*')
	}

	violationRules {
		rule {
			element = 'METHOD'

			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.50
			}

			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.70
			}

			excludes = [
					'*.*Exception*',
					'*.*Response*',
					'*.*Request*',
					'*.*Application*',
					'*.*Dto*',
					'*.config.*',
					'*.embed.*',
					'*.*Builder*'
			] + Qdomains
		}
	}
}

task jacocoTestCoverage(type: Test) {
	group 'verification'
	description 'Runs the unit tests with coverage'

	dependsOn(':test',
			':jacocoTestReport',
			':jacocoTestCoverageVerification')

	tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
	tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}

asciidoctor {
	dependsOn test
	configurations 'asciidoctorExt'
}

tasks.register('copyApiDocument', Copy) {
	dependsOn asciidoctor
	doFirst {
		delete file("src/main/resources/static/docs")
	}
	from asciidoctor.outputDir
	into file("src/main/resources/static/docs")
}

build {
	dependsOn copyApiDocument
}
